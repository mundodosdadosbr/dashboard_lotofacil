import pytest
from botocore.exceptions import ClientError
import paramiko
import boto3
from unittest.mock import patch, Mock, MagicMock
import io

from src.score_360_flow_to_s3 import lambda_handler, get_secret, StreamToLogger, remover_caracteres, encrypt_data, validate_file


def test_get_secret():
    with patch.object(boto3.session.Session, 'client') as mock_client:
        mock_client.return_value.get_secret_value.return_value = {'SecretString': 'secret'}
        secret = get_secret('secret_name')
        assert secret == 'secret'


def test_stream_to_logger():
    handler = MagicMock()
    logger = Mock()
    logger.handlers = [handler]
    stream_to_logger = StreamToLogger(logger, 'level')
    stream_to_logger.write('message')
    logger.log.assert_called_with('level', 'message')
    stream_to_logger.flush()
    handler.flush.assert_called_once()


def test_remover_caracteres():
    assert remover_caracteres("abc!@#123") == "abc123"
    assert remover_caracteres("file_name.txt") == "filename.txt"


def test_encrypt_data():
    kms_client = Mock()
    kms_client.encrypt.return_value = {'CiphertextBlob': b'encrypted_data'}
    encrypted_data = encrypt_data(kms_client, 'key_id', b'data')
    assert encrypted_data == b'encrypted_data'


def test_validate_file():
    header_bradesco = '0' * 16 + '0' + '123456789012345'
    header_bb = '0' * 14 + '12345678901234'

    is_valid, cnpj_part = validate_file(header_bradesco, 'Bradesco')
    assert is_valid and cnpj_part == '0123456789012345'

    is_valid, cnpj_part = validate_file(header_bb, 'Banco do Brasil')
    assert is_valid and cnpj_part == '12345678'


class TestScore360FlowToS3:
    def setup_method(self, method):
        self.event = {
            'ast_server': 'server',
            'ast_user': 'user',
            'ast_port': 'port',
            'secret_manager': 'manager',
            'remote_path': 'remote_path',
            'target_bucket': 'target_bucket',
            'target_path': 'target_path',
            'kms_key_id': 'kms_key_id'
        }
        self.context = {}

    def test_lambda_handler_success(self):
        with patch('boto3.client') as mock_boto_client, \
                patch('paramiko.SSHClient') as mock_ssh_client, \
                patch('paramiko.SFTPClient.from_transport') as mock_sftp_client, \
                patch('src.score_360_flow_to_s3.get_secret') as mock_get_secret:

            mock_s3 = Mock()
            mock_kms = Mock()
            mock_secrets = Mock()
            mock_boto_client.side_effect = [mock_secrets, mock_s3, mock_kms]

            mock_secrets.get_secret_value.return_value = {'SecretString': 'secret'}

            mock_ssh = Mock()
            mock_ssh_client.return_value = mock_ssh

            mock_sftp = Mock()
            mock_sftp.__enter__ = Mock(return_value=mock_sftp)
            mock_sftp.__exit__ = Mock()
            mock_sftp.listdir.return_value = ['file1', 'file2']
            mock_sftp_client.return_value = mock_sftp

            mock_get_secret.return_value = 'secret'

            result = lambda_handler(self.event, self.context)

            assert 'statusCode' in result
            assert result['statusCode'] == 200

    def test_lambda_handler_authentication_failure(self):
        with patch('boto3.client') as mock_boto_client, \
                patch('paramiko.SSHClient') as mock_ssh_client, \
                patch('paramiko.SFTPClient.from_transport') as mock_sftp_client, \
                patch('src.score_360_flow_to_s3.get_secret') as mock_get_secret:

            mock_s3 = Mock()
            mock_kms = Mock()
            mock_secrets = Mock()
            mock_boto_client.side_effect = [mock_secrets, mock_s3, mock_kms]

            mock_secrets.get_secret_value.side_effect = 'secret'

            mock_ssh = Mock()
            mock_ssh_client.return_value = mock_ssh

            mock_ssh.connect.side_effect = ConnectionError
            mock_sftp = Mock()
            mock_sftp.__enter__ = Mock(return_value=mock_sftp)
            mock_sftp.__exit__ = Mock()
            mock_sftp_client.return_value = mock_sftp

            mock_get_secret.return_value = 'secret'

            with pytest.raises(ValueError) as e:
                lambda_handler(self.event, self.context)

            assert str(e.value) == "Erro na Conex√£o"
